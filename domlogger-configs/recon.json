{
  "hooks": {
    "CrossWindow": {
      "attribute": [
        "get:window.name",
        "get:window.parent",
        "get:window.opener"
      ],
      "class": ["BroadcastChannel", "MessageEvent", "MessagePort"],
      "event": ["message"],
      "function": ["window.postMessage", "window.open"]
    },
    "NAVIGATION": {
      "event": ["hashchange", "beforeunload"],
      "function": [
        "history.pushState",
        "history.replaceState",
        "navigation.navigate"
      ]
    },
    "Network": {
      "class": ["WebSocket", "EventSource"],
      "function": ["WebSocket.prototype.send"]
    },
    "Parameters": {
      "attribute": [
        "get:URL.prototype.hash",
        "get:URL.prototype.search",
        "get:URL.prototype.searchParams",
        "get:document.documentURI",
        "get:document.baseURI",
        "get:document.URL"
      ],
      "function": [
        "URLSearchParams.prototype.get",
        "URLSearchParams.prototype.has",
        "URLSearchParams.prototype.append",
        "URLSearchParams.prototype.delete",
        "URLSearchParams.prototype.entries",
        "URLSearchParams.prototype.forEach",
        "URLSearchParams.prototype.getAll",
        "URLSearchParams.prototype.keys",
        "URLSearchParams.prototype.set",
        "URLSearchParams.prototype.values",
        "String.prototype.slice",
        "String.prototype.substring",
        "String.prototype.split"
      ]
    },
    "REGEX": {
      "class": [
        "RegExp"
      ]
    },
    "WebWorker": {
      "class": ["Worker", "ServiceWorker", "ServiceWorkerContainer"],
      "function": [
        "Worker.prototype.postMessage",
        "ServiceWorker.prototype.postMessage",
        "MessagePort.prototype.addEventListener",
        "Worker.prototype.addEventListener",
        "ServiceWorker.prototype.addEventListener",
        "navigator.serviceWorker.register",
        "ServiceWorkerContainer.prototype.register",
        "ServiceWorkerContainer.prototype.getRegistrations"
      ]
    },
    "clipboard": {
      "attribute": [
        "HTMLElement.prototype.oncopy",
        "HTMLElement.prototype.oncut",
        "HTMLElement.prototype.onpaste",
        "HTMLElement.prototype.onbeforepaste"
      ],
      "event": ["drag", "drop"]
    },
    "misc": {
      "class": [
        "Blob",
        "DOMParser",
        "Document"
      ],
      "function": [
        "URL.createObjectURL",
        "DOMParser.prototype.parseFromString",
        "Document.prototype.parseHTMLUnsafe"
      ]
    },
    "storage": {
      "attribute": ["set:document.cookie"],
      "function": [
        "localStorage.getItem",
        "localStorage.setItem",
        "sessionStorage.getItem",
        "sessionStorage.setItem"
      ]
    }
  },
  "config": {
    "*": {
      "!match": [
        "facebook",
        "metamask",
        "wappalyzer",
        "google_tag_manager",
        "googletagmanager",
        "bitwarden",
        "messenger_awaiter",
        "grecaptcha",
        "hcaptcha"
      ],
      "!matchTrace": [
        "facebook",
        "metamask",
        "wappalyzer",
        "google_tag_manager",
        "googletagmanager",
        "bitwarden",
        "messenger_awaiter",
        "grecaptcha",
        "hcaptcha"
      ]
    },
    "String.prototype.split": {
      "match": ["\\[&\\]"]
    },
    "String.prototype.substring|String.prototype.slice": {
      "match": [
        "exec:return thisArg.startsWith('?') || thisArg.startsWith('#') || thisArg == '' ? /\\[1\\]/ : /^$/"
      ]
    },
    "history.pushState|history.replaceState": {
      "hookFunction": "if (args.length > 2 && !location.toString().includes(args[2])) { location = args[2];} return args;"
    },
    "storage": {
      "hideThis": true
    },
    "window.open": {
      "hookFunction": "if (args.length > 2) { return args.slice(0, 2); } return args;"
    }
  },
  "removeHeaders": ["content-security-policy"]
}
