{
  "hooks": {
    "CSS": {
      "attribute": [
        "set:Element.prototype.cssText",
        "set:CSSRule.prototype.cssText",
        "set:HTMLStyleElement.prototype.src",
        "set:HTMLStyleElement.prototype.text",
        "set:HTMLStyleElement.prototype.innerText",
        "set:HTMLStyleElement.prototype.innerHTML",
        "set:HTMLStyleElement.prototype.textContent",
        "set:HTMLLinkElement.prototype.href"
      ]
    },
    "DOM": {
      "attribute": [
        "set:Element.prototype.innerHTML",
        "set:Element.prototype.outerHTML",
        "set:HTMLAnchorElement.prototype.href",
        "set:HTMLButtonElement.prototype.formAction",
        "set:HTMLInputElement.prototype.formAction",
        "set:HTMLFormElement.prototype.action",
        "set:HTMLIFrameElement.prototype.src",
        "set:HTMLIFrameElement.prototype.srcdoc",
        "set:HTMLFrameElement.prototype.src",
        "set:HTMLFrameElement.prototype.srcdoc",
        "set:HTMLMediaElement.prototype.src",
        "set:HTMLSourceElement.prototype.src",
        "set:HTMLAreaElement.prototype.href",
        "set:HTMLInputElement.prototype.src",
        "set:HTMLBaseElement.prototype.href",
        "set:HTMLTrackElement.prototype.src",
        "set:HTMLEmbededElement.prototype.src",
        "set:HTMLScriptElement.prototype.src",
        "set:HTMLScriptElement.prototype.text",
        "set:HTMLScriptElement.prototype.innerText",
        "set:HTMLScriptElement.prototype.innerHTML",
        "set:HTMLScriptElement.prototype.textContent"
      ],
      "function": [
        "Element.prototype.insertAdjacentHTML",
        "Element.prototype.setAttribute",
        "HTMLScriptElement.prototype.append",
        "HTMLScriptElement.prototype.appendChild"
      ]
    },
    "JQUERY": {
      "custom": [
        "function:$",
        "function:$.globalEval",
        "function:jQuery",
        "function:jQuery.globalEval",
        "function:jQuery.parseHTML",
        "function:jQuery.prototype.add",
        "function:jQuery.prototype.after",
        "function:jQuery.prototype.attr",
        "function:jQuery.prototype.append",
        "function:jQuery.prototype.appendTo",
        "function:jQuery.prototype.before",
        "function:jQuery.prototype.constructor",
        "function:jQuery.prototype.has",
        "function:jQuery.prototype.html",
        "function:jQuery.prototype.index",
        "function:jQuery.prototype.init",
        "function:jQuery.prototype.insertAfter",
        "function:jQuery.prototype.insertBefore",
        "function:jQuery.prototype.prepend",
        "function:jQuery.prototype.prependTo",
        "function:jQuery.prototype.prop",
        "function:jQuery.prototype.replaceAll",
        "function:jQuery.prototype.replaceWith",
        "function:jQuery.prototype.wrap",
        "function:jQuery.prototype.wrapAll",
        "function:jQuery.prototype.wrapInner"
      ]
    },
    "MISC": {
      "attribute": ["set:document.domain"],
      "class": [
        "FileReader",
        "WebSocket",
        "EventSource",
        "BroadcastChannel",
        "MessageEvent",
        "MessagePort",
        "Blob"
      ],
      "function": [
        "document.evaluate",
        "Element.prototype.evaluate",
        "fetch",
        "XMLHttpRequest.prototype.open",
        "XMLHttpRequest.prototype.send",
        "XMLHttpRequest.prototype.setRequestHeader",
        "WebSocket.prototype.send",
        "URL.createObjectURL",
        "window.postMessage",
        "Worker.prototype.postMessage",
        "ServiceWorker.prototype.postMessage",
        "navigator.serviceWorker.register",
        "window.open"
      ]
    },
    "REGEX": {
      "class": ["RegExp"]
    },
    "STORAGE": {
      "attribute": [
        "set:document.cookie",
        "get:document.cookie",
        "get:window.name"
      ],
      "function": ["localStorage.setItem", "sessionStorage.setItem"]
    },
    "XSS": {
      "class": ["Location"],
      "function": [
        "location.assign",
        "location.replace",
        "eval",
        "//Function",
        "document.write",
        "document.writeln",
        "Range.prototype.createContextualFragment"
      ]
    }
  },
  "config": {
    "*": {
      "!match": [
        "facebook",
        "metamask",
        "wappalyzer",
        "google_tag_manager",
        "googletagmanager",
        "bitwarden",
        "messenger_awaiter",
        "grecaptcha",
        "hcaptcha"
      ],
      "!matchTrace": [
        "facebook",
        "metamask",
        "wappalyzer",
        "google_tag_manager",
        "googletagmanager",
        "bitwarden",
        "messenger_awaiter",
        "grecaptcha",
        "hcaptcha"
      ]
    },
    "Element.prototype.setAttribute": {
      "match": [
        "exec:return args[0] == 'href' && args[1].includes(domlogger.globals.canary) ? /3313377/ : /^$/",
        "exec:return args[0] == 'src' && args[1].includes(domlogger.globals.canary) ? /3313377/ : /^$/",
        "exec:return args[0] == 'action' && args[1].includes(domlogger.globals.canary) ? /3313377/ : /^$/",
        "exec:return args[0] == 'formaction' && args[1].includes(domlogger.globals.canary) ? /3313377/ : /^$/",
        "exec:return args[0] == 'srcdoc' && args[1].includes(domlogger.globals.canary) ? /3313377/ : /^$/",
        "exec:return args[0] == 'style' && args[1].includes(domlogger.globals.canary) ? /3313377/ : /^$/"
      ]
    },
    "get:document.cookie": {
      "hookFunction": "thisArg = thisArg.replace(/=[^;]*(;|$)/g, '=3313377;')"
    },
    "get:window.name": {
      "hookFunction": "thisArg = domlogger.globals.canary;"
    },
    "STORAGE": {
      "hideThis": true
    }
  },
  "globals": { "canary": "3313377" },
  "removeHeaders": ["content-security-policy"]
}
